/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.camel.Exchange;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;

import java.util.ArrayList;
import java.util.Collection;

public class EntireFile extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        Processor buildBGAuthRequest = null;
        Predicate credentialsValid = null;
        Processor createNumbersResponseFromBGResponse = null;

        from("timer:foo").routeId("timer")
            .bean("myBean", "hello")
            .log("${body}");

        from("direct:getBgUser")
            .process(buildBGAuthRequest)
            .to("direct:bgmock")
            .choice()
                .when(credentialsValid)
                    .process(createNumbersResponseFromBGResponse)
                .otherwise()
                    .setHeader(Exchange.HTTP_RESPONSE_CODE).constant(401)
                .end();

        from("direct:start-conditional-bean")
            .routeId("conditional-bean-route")
            .choice()
            .when(method(FruitBean.class, "isApple"))
            .setHeader("favourite", simple("Apples"))
            .to("mock:result")
            .otherwise()
            .setHeader("favourite", header("fruit"))
            .to("mock:result")
            .endChoice()
            .end();
        from("direct:getBgUser")    .
            to    ("direct:bgmock")
            .choice()
            .when(credentialsValid)
            .process(createNumbersResponseFromBGResponse)
            .otherwise()
                .
            setHeader   (Exchange.HTTP_RESPONSE_CODE).constant(401)
            .end();
        from("direct:a")
            .choice()
            .when(simple("${header.foo()} == 'bar'"))
            .to("direct:b")
            .when(simple("${header.foo} == 'cheese'"))
            .to("direct:c")
            .otherwise()
            .to("direct:d");
    }
}
